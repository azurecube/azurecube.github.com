<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[for loop]]></title>
  <link href="http://azurecube.github.io/atom.xml" rel="self"/>
  <link href="http://azurecube.github.io/"/>
  <updated>2014-08-03T22:36:41+09:00</updated>
  <id>http://azurecube.github.io/</id>
  <author>
    <name><![CDATA[arte_nut (twitter)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[バッファローカルにEvilを有効にする/momonga.vim #6]]></title>
    <link href="http://azurecube.github.io/blog/2014/08/03/momonga-6/"/>
    <updated>2014-08-03T14:29:38+09:00</updated>
    <id>http://azurecube.github.io/blog/2014/08/03/momonga-6</id>
    <content type="html"><![CDATA[<h2>目標</h2>

<p>Emacs Evil (Extensible VI Layer) をバッファローカルに有効にする</p>

<h2>動機</h2>

<p><a href="http://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5Vim-%E6%80%9D%E8%80%83%E3%81%AE%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%A7%E7%B7%A8%E9%9B%86%E3%81%97%E3%82%88%E3%81%86-Drew-Neil/dp/4048916599">Amazon.co.jp： 実践Vim 思考のスピードで編集しよう!: Drew Neil, 新丈径: 本</a>を読んでvimのキーバインドや文字列操作に対する考えかたの有効性も理解して、vimを使いつつ、過去のmomonga.vimにも参加して.vimrcを弄ったりしたものの、エディタというか作業のベースがEmacsになってしまっていて、これはVimに置き換えもできないと感じていた</p>

<p>一方で以前から <a href="http://d.hatena.ne.jp/tarao/20130303/evil_intro">Evil: EmacsをVimのごとく使う &ndash; 導入編 &ndash; 貳佰伍拾陸夜日記</a> を読んで使ってみたいと気にはしていたのだけど<code>(evil-mode t)</code>を実行するとEmacs上の全てのバッファで有効になってしまうので導入に踏み切れないでいた。種々のアプリはEmacs上での動作を基本としているのでVimキーバインドはプログラミングするバッファのみで有効になって欲しい</p>

<p>で、momonga.vim#6がドワンゴでやる、ということだったので会場に対する興味もありつつこれを期にやってしまおうと企ててみた</p>

<h2>結果</h2>

<p>evil-local-modeという関数が用意されてて、完全に確認不足</p>

<h2>経過</h2>

<p>ちょっと頑張ってみないと、と思っていたevilをローカルバッファのみで有効にする、という処理が公式に用意されていて何をしに来たのか良くわからない状態に。
とりあえずこんな感じで該当のファイルをオープンしたタイミングで設定を有効にできるはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require 'evil)
</span><span class='line'>(evil-mode 0)
</span><span class='line'>
</span><span class='line'>(defmacro add-evil-mode (hook-name)
</span><span class='line'>  `(add-hook ',hook-name '(lambda () (evil-local-mode t))))
</span><span class='line'>
</span><span class='line'>(add-evil-mode sh-mode-hook)
</span><span class='line'>(add-evil-mode clojure-mode-hook)
</span><span class='line'>(add-evil-mode ruby-mode-hook)
</span><span class='line'>(add-evil-mode lisp-interaction-mode-hook)
</span><span class='line'>(add-evil-mode emacs-lisp-mode-hook)</span></code></pre></td></tr></table></div></figure>


<p>ついでにevil-local-modeを有効にしたり、C-gでEvilでの処理をキャンセルしてnormal-stateに戻るようなキーバインド設定。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  (defun toggle-evil-local-mode () (interactive)
</span><span class='line'>    (if evil-local-mode
</span><span class='line'>      (evil-local-mode 0)
</span><span class='line'>      (evil-local-mode 1)))
</span><span class='line'>  
</span><span class='line'>  (defun evil-escape-or-quit (&optional prompt)
</span><span class='line'>    (interactive)
</span><span class='line'>    (cond
</span><span class='line'>      ((or (evil-normal-state-p) (evil-insert-state-p) (evil-visual-state-p)
</span><span class='line'>           (evil-replace-state-p) (evil-visual-state-p)) [escape])
</span><span class='line'>    (t (kbd "C-g"))))
</span><span class='line'>  
</span><span class='line'>  (define-key key-translation-map     (kbd "C-g")     'evil-escape-or-quit)
</span><span class='line'>  (define-key evil-operator-state-map (kbd "C-g")     'evil-escape-or-quit)
</span><span class='line'>  (define-key evil-normal-state-map   [escape]        'keyboard-quit)
</span><span class='line'>  (global-set-key                     (kbd "C-c C-z") 'toggle-evil-local-mode)</span></code></pre></td></tr></table></div></figure>


<p>とりあえず、この辺を設定しておいて少しずつEvilを使っていくようにしようと思う。</p>

<h2>課題</h2>

<p>evil-mode-lineがevil-local-modeの場合は効いてなさそうなのをなんとかしたい。。。<br/>
<a href="http://rhysd.hatenablog.com/entry/2013/09/17/220837">clever-f.vim</a>相当の機能が欲しい</p>

<h2>感想とか</h2>

<p>会場について特にドワンゴだから、といったような特殊な感じはなかったんじゃないかと。。<br/>
うたってみたの実演があったけど、(闇のVimの)勉強会では普通のことのようだし。<br/>
前回同様ゆるくもくもくできたけど、前回朝から晩までだったのに比べればだいぶ短期集中だったかな。</p>

<p>余り色々の人とお話はできなかったけれど@pogin503さんにElispのことを教わったりした。Vimはあまり使ってないとのことだったのでVimについて知りたければ入門viより実践Vimを読むべきと押し付けたりした。</p>

<p>あとは、周りのVimmerのコイツ何してるの、という視線もないまま空気と化して一人もくもくとEmacsをいじっていた私を見かねて主催の@supermomongaさんがEvil回りの話を振ってくれたのだけど、期待に応えられず。</p>

<p>もってきてもらった課題はVimユーザとしてはEvilを使ってる状況でC-[でkeyboard-quit相当の処理をしたい場面があるのだけど思った通りに動かないといったもの。
例えば下記の設定はEscapeキーには効くけど、C-[には効かない。</p>

<p><code>
(define-key minibuffer-inactive-mode-map [escape] 'keyboard-quit)
</code></p>

<p>EscapeもC-[もESCとして認識されてるみたいなのだけど、どうもそれぞれ別個に機能としてのESCと紐付いてるみたいで、かつC-[のキーバインドを変更する方法は見付けられなかった。keycodeを検出するxevを動かすために@supermomongaさんのMacにXを捩じ込んだりもしたけど、keycode指定も上手くいかなかくて悔しい思いをした。</p>

<p>ちなみに後で試してみたところ強引に下記のようにC-[をC-gにtranslateしてしまえばkeyboard-quitを実行することは可能だった。</p>

<p><code>
(keyboard-translate ?\e ?\a)
</code></p>

<p>参考 <a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_26.html">GNU Emacs Lispリファレンスマニュアル: Character Type</a></p>

<p>ということで進捗としては何しにわざわざ勉強会に行ったのか、といった感じになってしまったけれどこういう機会がないとなかなかEvilに向き会えなかったので良い切っ掛けだったと思う。<br/>
今回のことでEmacs上でVimに近いキーバインドを使って作業できる状況を作れるようにはなってきたのだけどvimscriptで実装されてるあの機能が欲しい、となったりしそうなのが若干不安。そこまでEvilが手に馴染めばそれはそれで良い兆候なのだろうけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Linuxのshutdown]]></title>
    <link href="http://azurecube.github.io/blog/2014/07/30/shutdown/"/>
    <updated>2014-07-30T08:18:57+09:00</updated>
    <id>http://azurecube.github.io/blog/2014/07/30/shutdown</id>
    <content type="html"><![CDATA[<h2>目標</h2>

<p>Localで使ってるLinuxをremoteと間違えずに停止する</p>

<h2>動機</h2>

<p>local machineをLinuxで使ってて、停止処理もterminal上なので、sshでアクセスするremote nodeと停止処理が一緒になってしまう<br/>
実際に何度か間違えてremote nodeを停止して辛い思いをしたのでfool proofな停止方法を考えたい</p>

<h2>結果</h2>

<p>sshのセッションではshutdownしないコマンドを作る</p>

<h2>過程</h2>

<p>停止のコマンドは色々あるようだけれど、停止のプロセスや再起動の有無などがメインでremoteの場合とlocalの場合を分けるような使い方についての情報は見付けられなかった</p>

<p><a href="http://d.hatena.ne.jp/kanonji/20081125/1227892903">Linuxのシャットダウンや再起動のコマンドは色々ある &ndash; kanonjiの日記</a></p>

<p>普通の人はこういうところで困ることがなさそうなのだけど、あまりリモートの停止処理が問題にならない理由は下記あたりかな。。</p>

<ol>
<li>local nodeをterminalから停止しない</li>
<li>localとremoteでパスワードが違う</li>
</ol>


<p>1.についてWindowsやLinux Desktopの場合でもWindow ManagerのGUIで停止する場合などはそもそもremoteと同じ処理で停止しないのでlocalと間違えて、というのはなさそう(複数のremote同士というのはあるかもしれないけど)</p>

<p>私はタイル型WMの<a href="http://xmonad.org/">Xmonad</a>を使っていて停止用のGUIインターフェイスはないのでterminalからコマンドでlocalを停止してるけど、これが少数派なのかもしれない。みんなもっとXMonad使おう</p>

<p>ちなみにXmonadの場合下記のように自分で設定ファイルを書き変えてキーバインドに割り当ててる、というのが散見された。<br/>
<a href="https://bbs.archlinux.org/viewtopic.php?id=139232">Xmonad doesn&rsquo;t have permissions to reboot when started via init[SOLVED (Page 1) / Applications &amp; Desktop Environments / Arch Linux Forums</a></p>

<p>停止方法について質問してるような例もあったけれど、GDM入れるというのが提案されていて、多分一度XMonad抜けるというのが前提<br/>
<a href="http://www.haskell.org/pipermail/xmonad/2012-January/012295.html">[xmonad] Logout, Shutdown, Restart.</a></p>

<p>2.についてセキュリティの観点で当然の心得だとは思うけれど、無精な私はテスト用のVMなどはsudoがパスワードの再入力なしで実行できるようにしてしまっていて今のところ改めるつもりがない</p>

<p>ということであまり既成のツールとかは期待できなさそうなのでちょっと書いてみることに<br/>
インターフェイスを変えるのが有効そうなのでlocalでコマンドを変更する、というのが良さそうかなと。ついでに普段サーバーとしてアクセスしてるノードにも直接キーボード繋いでアクセスすることもあるのでsshで接続してる時にはshutdownしないというスクリプトにして、各ノードに配布することで目の前のnodeを停止する場合のみに使える、というコマンドにしてみた。需要なさそう。。。</p>

<div><script src='https://gist.github.com/22a861c21708b9f13065.js?file=hlocal'></script>
<noscript><pre><code>#!/bin/bash

#check oplion by command first character
op=$(echo $(basename $0 ) | cut -b 1)

# parent process list
plist=(&quot;$$&quot;)

# add parent processes
ppid() {
  plist=(&quot;$(ps h -o ppid -p $1)&quot; &quot;${plist[@]}&quot;)
}

# get process command
pcom() {
  ps h -o command -p $1
}

# create process list until init
while [ ${plist[0]} -gt 1 ]
do
  ppid $plist
done

# check process before init is ssh or not
echo $(pcom ${plist[1]}) | grep ssh &gt; /dev/null
if [ $? -eq 0 ]
then
  echo &quot;You are in ssh session and cannot shutdown `hostname` by this command&quot;
else
  sudo shutdown -${op} now
fi
</code></pre></noscript></div>


<p>ちなみに、注意点としては親にsshがあるかを探していてtelnetやmoshでの接続の場合は普通にshutdownされてしまうこと。
あと初めの一文字をshutdownのオプションにしているので名前を変えるときにはhからはじまるようにしないと停止しなかったりする。rにするとリブートする</p>

<p>私はhalt local/reboot localという意味からhlocal/rlocalという名前でコマンドにしていてrlocalはhlocalへのシンボリックリンクにしたかったのでこういう作りになってる</p>

<p>とりあえず私はこれで誤停止しなくなったのだけど、また別のシチュエーションでの停止の問題があったら他の方法も考えてみたい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 設定]]></title>
    <link href="http://azurecube.github.io/blog/2014/07/27/octopress-config/"/>
    <updated>2014-07-27T13:41:23+09:00</updated>
    <id>http://azurecube.github.io/blog/2014/07/27/octopress-config</id>
    <content type="html"><![CDATA[<h2>動機</h2>

<p>とりあえず作ったgithub pagesに最低限の設定を施したい</p>

<h2>目標</h2>

<ul>
<li>blogのタイトルを変える</li>
<li>エントリ内のlinkを新しいtabで開く</li>
</ul>


<h2>結果</h2>

<p>達成、というのもおこがましい気がするけど、なんとかなった。</p>

<h2>過程</h2>

<p>blogのtitleは_config.ymlの変更。下記を参考に。<br/>
<a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる &ndash; Glide Note &ndash; グライドノート</a></p>

<p>linkについては下記を参考に外部ファイルに限らず_blankを設定することに。<br/>
<a href="http://tantant.jp/blog/Octopress/configuring-octopress/">Octopressの初期設定時に気にしておきたい9箇所 &ndash; tantant</a></p>

<figure class='code'><figcaption><span>:source/include/config/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">language</span><span class="o">=</span><span class="s2">&quot;JavaScript&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a[href^=&#39;http&#39;]&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず見栄えはともかくoutputに必要最低限が得られたので、記録しながら作業を進めていくことにしたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress導入]]></title>
    <link href="http://azurecube.github.io/blog/2014/07/27/octopress/"/>
    <updated>2014-07-27T00:19:30+09:00</updated>
    <id>http://azurecube.github.io/blog/2014/07/27/octopress</id>
    <content type="html"><![CDATA[<h2>動機</h2>

<p>blogを書くのが面倒になって久しくoutputしてなかったのだけど、下記を見て試してちょっと試してみたくなったので。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ブロマガにシンタクスハイライトされたコードを貼付ける機能がないためブロマガでプログラミングの記事を書く気になりません。なんとかしてください。 — 現在、ブログとして最高のWebサービスはGitHubであると思う。 <a href="http://t.co/x1K4pG0XH7">http://t.co/x1K4pG0XH7</a></p>&mdash; Ryou Ezoe (@EzoeRyou) <a href="https://twitter.com/EzoeRyou/statuses/492108203518611456">2014, 7月 24</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>目標</h2>

<p>octopressを使ってのGithub Pageの作成</p>

<h2>結果</h2>

<p>今見ているこのページ。</p>

<h2>過程</h2>

<p>Githubでblogということで探していると、どうも静的にローカルで作成してuploadする形式になりoctopressというツールが便利そうだったのでひとまずこれを採用していじってみることにしようと方針が決まる。</p>

<p>リポジトリの持ち方などは下記を参考に。<br/>
<a href="http://tokkonopapa.github.io/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで &ndash; T.I.D.</a></p>

<p>ただ、どうもpreview時に下記のようなエラーになってしまうので調べたところ下記と似たような状況だったのでGemfileに <code>gem 'therubyracer'</code> を追加して対処。<br/>
<a href="http://mymemo.weby117.com/develop/ruby-geminstall-error_3.html">Ruby:Rails4 で Could not find a JavaScript runtime エラー | サイト運営の私的メモ</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake preview  
</span><span class='line'>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000  
</span><span class='line'>/home/kino/.rbenv/versions/1.9.3-p547/lib/ruby/gems/1.9.1/gems/execjs-2.2.0/lib/execjs/runtimes.rb:51:in `autodetect': Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)</span></code></pre></td></tr></table></div></figure>


<p>上記までで一応目標は達成。<br/>
markdownを忘れてしまったまま書いているので勉強しなおさないといけないのだけど、せっかく手元で色々設定できるのでwebベースのブログを使ってたころに挫折したEmacsとの連携もどうにかしたいところ。</p>

<p>たださがしているとorg-modeと連携できるようで便利そうなのがあり、いきなりmarkdown学習意欲が削がれることに。<br/>
<a href="http://quickhack.net/nom/blog/2013-05-01-org-octopress.html">Octopress の記事を org-mode で &ndash; Quickhack Diary</a></p>

<p>それなりにoutputが簡単にできそうな環境を作れそうなので今後いくつかは書き方とか、設定とかに関して投稿できれば良いな。</p>
]]></content>
  </entry>
  
</feed>
